package persistence;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import mapper.ResultMapper;
import persistence.exceptions.DaoException;
import persistence.querycommands.QueryCommand;

public class DaoConnection {
    private static final Logger LOGGER = LoggerFactory.getLogger(DaoConnection.class);

    /**
     * @param queries queries using the same connection before commit atomicly
     * @throws DaoException one or more query failed, each request is rollbacked
     */
    public static void executeTransation(List<QueryCommand<?>> queries) throws DaoException {
        Connection conn = null;

        try {

            conn = HikariPool.getConnection();
            conn.setAutoCommit(false);

            for (QueryCommand<?> queryCommand : queries) {
                queryCommand.execute(conn);
            }

        } catch (SQLException | IOException e) {

            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException omg) {
                    LOGGER.warn("Connection could not be rollbacked [" + omg.getMessage() + "]");
                }
            }

            throw new DaoException(e);

        } finally {

            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    LOGGER.warn("Connection failed to close");
                }
            }
        }
    }

    /**
     * @param query the query to execute
     * @return the exact result of the query of type T
     * @param <T> the type of the model to @return
     * @throws DaoException content couldn't be loaded
     */
    public static <T> T executeQuery(QueryCommand<T> query) throws DaoException {
        Connection conn = null;

        try {

            conn = HikariPool.getConnection();
            return query.execute(conn);

        } catch (SQLException | IOException e) {

            throw new DaoException(e);

        } finally {

            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    LOGGER.warn("Connection failed to close");
                }
            }
        }
    }

    /**
     * @param sql simple select query
     * @param mapper the mapper translating ResultSet to the corresponding Model
     * @param <T> the type of the model to @return
     * @return the model generated by the @mapper from the data return by @sql
     * @throws DaoException content couldn't be loaded
     */
    public static <T> T executeSelectQuery(String sql, ResultMapper<T> mapper) throws DaoException {
        QueryCommand<T> query = (Connection c) -> {
            try (Statement s = c.createStatement();) {
                try (ResultSet r = s.executeQuery(sql)) {
                    return mapper.process(r);
                }
            }
        };
        return executeQuery(query);
    }
}
