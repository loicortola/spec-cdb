package persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import mapper.ResultMapper;
import persistence.exceptions.DaoException;
import persistence.querycommands.QueryCommand;

public class DaoConnection {
    private static String database    = DbProperties.getConfig("database");
    private static String port        = DbProperties.getConfig("port");
    private static String hostAddress = DbProperties.getConfig("hostAddress");

    private static String url      = String.format("jdbc:mysql://%s:%s/%s?autoReconnect=true&useSSL=false",
            hostAddress, port, database);
    private static String password = DbProperties.getConfig("dbpassword");;
    private static String user     = DbProperties.getConfig("dbuser");

    private static final Logger LOGGER = LoggerFactory.getLogger(DaoConnection.class);

    /**
     * @param sql simple select query
     * @param mapper the mapper translating ResultSet to the corresponding Model
     * @param <T> the type of the model to @return
     * @return the model generated by the @mapper from the data return by @sql
     * @throws SQLException content couldn't be loaded
     */
    public static <T> T executeSelectQuery(String sql, ResultMapper<T> mapper) throws SQLException {
        return executeQuery((Connection c) -> {
            try (Statement s = c.createStatement();) {
                try (ResultSet r = s.executeQuery(sql)) {
                    return mapper.process(r);
                }
            }
        });
    }

    /**
     * @param query the query to execute
     * @return the exact result of the query of type T
     * @param <T> the type of the model to @return
     * @throws SQLException content couldn't be loaded
     */
    public static <T> T executeQuery(QueryCommand<T> query) throws SQLException {
        Connection conn = null;

        try {
            conn = DriverManager.getConnection(url, user, password);
            return query.execute(conn);
        } catch (SQLException e) {

            LOGGER.error(e.getMessage());
            throw new DaoException(e);

        } finally {

            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    LOGGER.error("Connection failed to close");
                }
            }

        }
    }
}
